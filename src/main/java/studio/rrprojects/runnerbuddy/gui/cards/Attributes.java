package studio.rrprojects.runnerbuddy.gui.cards;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import studio.rrprojects.runnerbuddy.containers.character.CharacterContainer;
import studio.rrprojects.runnerbuddy.controllers.RunnerBuilderController;
import studio.rrprojects.runnerbuddy.gui.cards.components.AttributeModule;
import studio.rrprojects.runnerbuddy.utils.JUtils;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class Attributes extends Card {
    private JPanel panelMain;
    private AttributeModule attributeModuleBody;
    private JLabel labelName;
    private JLabel labelAllotted;
    private JLabel labelRacialMod;
    private JLabel labelTotal;
    private JLabel labelAddRemove;
    private AttributeModule attributeModuleQuickness;
    private AttributeModule attributeModuleStrength;
    private AttributeModule attributeModuleCharisma;
    private AttributeModule attributeModuleIntelligence;
    private AttributeModule attributeModuleWillpower;
    private AttributeModule attributeModuleMagic;
    private AttributeModule attributeModuleReaction;
    private AttributeModule attributeModuleEssence;

    private ArrayList<JPanel> listPanels;
    private ArrayList<JLabel> listLabels;

    private int labelSize = 18;
    private ArrayList<AttributeModule> listAttributeModules;

    public Attributes(RunnerBuilderController controller, CharacterContainer characterContainer) {
        this.controller = controller;
        this.characterContainer = characterContainer;

        characterContainer.getAttributeController().passThisCard(this);

        Formatting();
        SettingUpAttributes();
    }

    private void Formatting() {
        JUtils.SetDefaultPanelColors(panelMain);

        listLabels = new ArrayList<>();
        listLabels.add(labelName);
        listLabels.add(labelAllotted);
        listLabels.add(labelRacialMod);
        listLabels.add(labelTotal);
        listLabels.add(labelAddRemove);

        for (JLabel label : listLabels) {
            JUtils.SetDefaultLabelColorsAndFont(label, labelSize);
        }
    }

    private void SettingUpAttributes() {
        listAttributeModules = new ArrayList<>();
        ProcessAttribute(attributeModuleBody, "Body");
        ProcessAttribute(attributeModuleQuickness, "Quickness");
        ProcessAttribute(attributeModuleStrength, "Strength");
        ProcessAttribute(attributeModuleCharisma, "Charisma");
        ProcessAttribute(attributeModuleIntelligence, "Intelligence");
        ProcessAttribute(attributeModuleWillpower, "Willpower");

        ProcessAttribute(attributeModuleEssence, "Essence", false);
        ProcessAttribute(attributeModuleMagic, "Magic", false);
        ProcessAttribute(attributeModuleReaction, "Reaction", false);
    }

    private void ProcessAttribute(AttributeModule attributeModule, String attributeName) {
        ProcessAttribute(attributeModule, attributeName, true);
    }

    private void ProcessAttribute(AttributeModule attributeModule, String attributeName, boolean isEditable) {
        //Add the attributeModule to a list
        listAttributeModules.add(attributeModule);

        attributeModule.LinkAttribute(characterContainer, attributeName, isEditable);
    }

    public void MassUpdateEvent() {
        for (AttributeModule module : listAttributeModules) {
            module.UpdateValues();
        }
    }

    @Override
    public String getTitle() {
        return "CardAttributes";
    }

    @Override
    public JPanel getPanel() {
        return panelMain;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(10, 5, new Insets(0, 0, 0, 0), -1, -1));
        attributeModuleBody = new AttributeModule();
        panelMain.add(attributeModuleBody.$$$getRootComponent$$$(), new GridConstraints(1, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        attributeModuleQuickness = new AttributeModule();
        panelMain.add(attributeModuleQuickness.$$$getRootComponent$$$(), new GridConstraints(2, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        attributeModuleStrength = new AttributeModule();
        panelMain.add(attributeModuleStrength.$$$getRootComponent$$$(), new GridConstraints(3, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        attributeModuleCharisma = new AttributeModule();
        panelMain.add(attributeModuleCharisma.$$$getRootComponent$$$(), new GridConstraints(4, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        attributeModuleIntelligence = new AttributeModule();
        panelMain.add(attributeModuleIntelligence.$$$getRootComponent$$$(), new GridConstraints(5, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        attributeModuleWillpower = new AttributeModule();
        panelMain.add(attributeModuleWillpower.$$$getRootComponent$$$(), new GridConstraints(6, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        attributeModuleMagic = new AttributeModule();
        panelMain.add(attributeModuleMagic.$$$getRootComponent$$$(), new GridConstraints(8, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        attributeModuleReaction = new AttributeModule();
        panelMain.add(attributeModuleReaction.$$$getRootComponent$$$(), new GridConstraints(9, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelName = new JLabel();
        labelName.setText("Attribute Name");
        panelMain.add(labelName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelAllotted = new JLabel();
        labelAllotted.setText("Allotted Points");
        panelMain.add(labelAllotted, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelRacialMod = new JLabel();
        labelRacialMod.setText("Racial Modifer");
        panelMain.add(labelRacialMod, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelTotal = new JLabel();
        labelTotal.setText("Total Points");
        panelMain.add(labelTotal, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelAddRemove = new JLabel();
        labelAddRemove.setText("Add/Remove Points");
        panelMain.add(labelAddRemove, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        attributeModuleEssence = new AttributeModule();
        panelMain.add(attributeModuleEssence.$$$getRootComponent$$$(), new GridConstraints(7, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

}
