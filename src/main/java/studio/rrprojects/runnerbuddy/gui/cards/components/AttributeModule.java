package studio.rrprojects.runnerbuddy.gui.cards.components;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import studio.rrprojects.runnerbuddy.containers.character.CharacterContainer;
import studio.rrprojects.runnerbuddy.utils.JUtils;

import javax.swing.*;
import java.awt.*;

public class AttributeModule extends JPanel {
    private CharacterContainer characterContainer;
    
    private JPanel panelMain;
    private JButton buttonPlus;
    private JButton buttonMinus;
    private JLabel labelAttribute;
    private JLabel labelAllottedPoints;
    private JLabel labelRacialMod;
    private JLabel labelTotalPoints;
    
    private int buttonSize = 24;
    private int labelSize = 18;
    
    
    private String attributeName;
    private Integer modValue;
    
    private final int allottedMinimum = 1;
    private final int allottedMax = 6;
    private int allottedPoints;
    private int totalPoints;

    public AttributeModule() {

        JUtils.SetDefaultPanelColors(panelMain);

        JUtils.SetDefaultButtonColorsAndFont(buttonPlus, buttonSize);
        JUtils.SetButtonColorsAndFont(buttonMinus, Color.RED, buttonSize);

        JUtils.SetDefaultLabelColorsAndFont(labelAttribute, labelSize);
        JUtils.SetDefaultLabelColorsAndFont(labelAllottedPoints, labelSize);
        JUtils.SetDefaultLabelColorsAndFont(labelRacialMod, labelSize);
        JUtils.SetDefaultLabelColorsAndFont(labelTotalPoints, labelSize);

        AddFunctionToButtons();
    }

    private void AddFunctionToButtons() {
        buttonMinus.addActionListener(actionEvent -> ChangeAllottedPoints(-1));
        buttonPlus.addActionListener(actionEvent -> ChangeAllottedPoints(1));
    }

    private void ChangeAllottedPoints(int valueChange) {
        allottedPoints += valueChange;

        CalculateMax();

        UpdateValues();
    }

    private void CalculateMax() {
        if (allottedPoints >= allottedMax) {
            allottedPoints = allottedMax;
            buttonPlus.setEnabled(false);
        } else {
            buttonPlus.setEnabled(true);
        }
    }

    public void LinkAttribute(CharacterContainer characterContainer, String attributeName, boolean isEditable) {
        this.characterContainer = characterContainer;
        this.attributeName = attributeName;

        allottedPoints = allottedMinimum;

        labelAttribute.setText(attributeName);

        if (!isEditable) {
            labelAllottedPoints.setEnabled(false);
            labelRacialMod.setEnabled(false);
            buttonMinus.setEnabled(false);
            buttonPlus.setEnabled(false);

            labelAllottedPoints.setVisible(false);
            labelRacialMod.setVisible(false);
            buttonMinus.setVisible(false);
            buttonPlus.setVisible(false);
        }

        UpdateValues();
    }

    public void UpdateValues() {
        //Racial Modifier
        modValue = characterContainer.getRaceController().getSelectedRace().getModAttributeMap().get(attributeName);
        labelRacialMod.setText(String.valueOf(modValue));

        //Allotted Points
        int realMinimum = allottedMinimum - modValue; //If a race has a negative mod Value (Trolls Intelligence), this calculates the minimum you can have

        if (realMinimum >= allottedMinimum && allottedPoints < realMinimum) {
            allottedPoints = realMinimum;
        }

        labelAllottedPoints.setText(String.valueOf(allottedPoints));
        buttonMinus.setEnabled(allottedPoints != allottedMinimum && allottedPoints != realMinimum);

        //Total Points
        totalPoints = allottedPoints + modValue;
        labelTotalPoints.setText("( " + totalPoints + " )");
    }

    public JPanel getPanel() {
        return panelMain;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(1, 9, new Insets(0, 10, 0, 10), -1, -1));
        panelMain.setBackground(new Color(-14737111));
        panelMain.setForeground(new Color(-11805347));
        panelMain.setMinimumSize(new Dimension(800, 40));
        panelMain.setPreferredSize(new Dimension(800, 40));
        buttonPlus = new JButton();
        buttonPlus.setText("+");
        panelMain.add(buttonPlus, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelAttribute = new JLabel();
        labelAttribute.setText("ATTRIBUTE");
        panelMain.add(labelAttribute, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panelMain.add(separator1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        labelAllottedPoints = new JLabel();
        labelAllottedPoints.setText("1");
        panelMain.add(labelAllottedPoints, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator2 = new JSeparator();
        panelMain.add(separator2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        labelRacialMod = new JLabel();
        labelRacialMod.setText("+1");
        panelMain.add(labelRacialMod, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator3 = new JSeparator();
        panelMain.add(separator3, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        labelTotalPoints = new JLabel();
        labelTotalPoints.setText("( 2 )");
        panelMain.add(labelTotalPoints, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonMinus = new JButton();
        buttonMinus.setText("-");
        panelMain.add(buttonMinus, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}
