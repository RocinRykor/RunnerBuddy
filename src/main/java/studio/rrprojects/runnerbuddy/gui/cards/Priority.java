package studio.rrprojects.runnerbuddy.gui.cards;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import studio.rrprojects.runnerbuddy.containers.character.CharacterContainer;
import studio.rrprojects.runnerbuddy.controllers.RunnerBuilderController;
import studio.rrprojects.runnerbuddy.gui.popups.PriorityPopup;
import studio.rrprojects.runnerbuddy.misc.PriorityGroup;
import studio.rrprojects.runnerbuddy.utils.JUtils;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;

public class Priority extends Card {
    private JPanel panelMain;
    private JButton buttonRace;
    private JLabel labelRace;
    private JLabel labelMagic;
    private JLabel labelAttributes;
    private JLabel labelSkills;
    private JButton buttonMagic;
    private JButton buttonAttributes;
    private JButton buttonSkills;
    private JButton buttonResources;
    private JLabel labelResources;
    private ArrayList<MyButtonGroup> listButtonGroups;

    private int textSize = 24;
    private int buttonSize = 18;

    String defaultText = "Click to select Priority Level";

    public Priority(RunnerBuilderController controller, CharacterContainer characterContainer) {
        this.controller = controller;
        this.characterContainer = characterContainer;

        $$$setupUI$$$();


        GroupLabelsAndButtons();
        SetColorsAndFonts();
        FormatButtons();
    }

    private void GroupLabelsAndButtons() {
        listButtonGroups = new ArrayList<>();
        listButtonGroups.add(new MyButtonGroup(labelRace, buttonRace));
        listButtonGroups.add(new MyButtonGroup(labelMagic, buttonMagic));
        listButtonGroups.add(new MyButtonGroup(labelAttributes, buttonAttributes));
        listButtonGroups.add(new MyButtonGroup(labelSkills, buttonSkills));
        listButtonGroups.add(new MyButtonGroup(labelResources, buttonResources));
    }

    private void SetColorsAndFonts() {
        JUtils.SetDefaultPanelColors(panelMain);

        for (MyButtonGroup buttonGroup : listButtonGroups) {
            JUtils.SetDefaultButtonColorsAndFont(buttonGroup.getButton(), buttonSize);
            JUtils.SetDefaultLabelColorsAndFont(buttonGroup.getLabel(), textSize);
        }
    }

    private void FormatButtons() {
        for (MyButtonGroup buttonGroup : listButtonGroups) {
            buttonGroup.button.setText(defaultText);
            buttonGroup.label.setText(buttonGroup.keyword + ": "); //Cleans thing sup without changing the keyword

            buttonGroup.button.addActionListener(actionEvent -> {
                CreatePriorityPopup(buttonGroup.keyword);
            });
        }
    }

    private void CreatePriorityPopup(String keyword) {
        new PriorityPopup(this, characterContainer, keyword);
    }

    @Override
    public String getTitle() {
        return "CardPriority";
    }

    @Override
    public JPanel getPanel() {
        return panelMain;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        labelRace = new JLabel();
        labelRace.setText("Race");
        panelMain.add(labelRace, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonRace = new JButton();
        buttonRace.setText("Button");
        panelMain.add(buttonRace, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panelMain.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panelMain.add(spacer2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        labelMagic = new JLabel();
        labelMagic.setText("Magic");
        panelMain.add(labelMagic, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonMagic = new JButton();
        buttonMagic.setText("Button");
        panelMain.add(buttonMagic, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelAttributes = new JLabel();
        labelAttributes.setText("Attributes");
        panelMain.add(labelAttributes, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonAttributes = new JButton();
        buttonAttributes.setText("Button");
        panelMain.add(buttonAttributes, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelSkills = new JLabel();
        labelSkills.setText("Skills");
        panelMain.add(labelSkills, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonSkills = new JButton();
        buttonSkills.setText("Button");
        panelMain.add(buttonSkills, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonResources = new JButton();
        buttonResources.setText("Button");
        panelMain.add(buttonResources, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelResources = new JLabel();
        labelResources.setText("Resources");
        panelMain.add(labelResources, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    public void UpdateButtons() {
        for (MyButtonGroup buttonGroup : listButtonGroups) {
            PriorityGroup.PriorityOption selectedOption = characterContainer.getPriorityController().getPriorityGroupByKeyword(buttonGroup.keyword).getSelectedOption();
            if (selectedOption == null) {
                buttonGroup.button.setText(defaultText);
            } else {
                buttonGroup.button.setText(selectedOption.getDisplayName());
            }
        }
    }

    public void SubmitEvent(String keyword, PriorityGroup.PriorityOption priorityOption) {
        HashMap<String, Runnable> mapRunnable = new HashMap<>();
        mapRunnable.put("Race", () -> characterContainer.getRaceController().setSelectedPriorityOption(priorityOption));
        mapRunnable.put("Attributes", () -> characterContainer.getAttributeController().setSelectedPriorityOption(priorityOption));

        if (mapRunnable.containsKey(keyword)) {
            mapRunnable.get(keyword).run();
        }
    }

    private class MyButtonGroup {
        private final JLabel label;
        private final JButton button;
        private final String keyword;

        public MyButtonGroup(JLabel label, JButton button) {
            this.label = label;
            this.button = button;
            keyword = label.getText();
        }

        public JLabel getLabel() {
            return label;
        }

        public JButton getButton() {
            return button;
        }

        public String getTitle() {
            return keyword;
        }
    }
}
