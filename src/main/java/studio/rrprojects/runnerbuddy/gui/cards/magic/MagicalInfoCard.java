package studio.rrprojects.runnerbuddy.gui.cards.magic;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import studio.rrprojects.runnerbuddy.containers.character.CharacterContainer;
import studio.rrprojects.runnerbuddy.gui.cards.Card;
import studio.rrprojects.runnerbuddy.gui.cards.components.BasicComboBox;

import javax.swing.*;
import java.awt.*;

public class MagicalInfoCard extends Card {
    private final CharacterContainer characterContainer;
    private JPanel panelMain;
    private JPanel panelMagic;
    private JScrollPane panelMagicDescription;
    private JPanel panelMagicBoxes;

    public MagicalInfoCard(CharacterContainer characterContainer) {
        this.characterContainer = characterContainer;
        setPanel(panelMain);

        FormatBoxPanel();
    }

    private void FormatBoxPanel() {
        GridLayout gridLayout = new GridLayout();
        gridLayout.setColumns(0);
        gridLayout.setRows(1);
        panelMagicBoxes.setLayout(gridLayout);

        BasicComboBox boxMagicType = new BasicComboBox("Magic Type");
        BasicComboBox boxMagicTradition = new BasicComboBox("Tradition");
        BasicComboBox boxTotemSelection = new BasicComboBox("Totem/Element");


        panelMagicBoxes.add(boxMagicType.getPanel());
        panelMagicBoxes.add(boxMagicTradition.getPanel());
        panelMagicBoxes.add(boxTotemSelection.getPanel());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMagic = new JPanel();
        panelMagic.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(panelMagic, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(320, 44), null, 0, false));
        panelMagicDescription = new JScrollPane();
        panelMagic.add(panelMagicDescription, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        panelMagicBoxes = new JPanel();
        panelMagicBoxes.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        panelMagic.add(panelMagicBoxes, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(-1, 60), new Dimension(-1, 60), new Dimension(-1, 60), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

}
