package studio.rrprojects.runnerbuddy.gui.popups.gear;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import studio.rrprojects.runnerbuddy.containers.character.CharacterContainer;
import studio.rrprojects.runnerbuddy.containers.items.Buyable;
import studio.rrprojects.runnerbuddy.utils.JUtils;
import studio.rrprojects.util_library.DebugUtils;

import javax.swing.*;
import java.awt.*;

public class AddBuyablePopup {
    private final JFrame frame;
    private final Buyable buyable;
    private JPanel panelMain;
    private JButton buttonAddItem;
    private JSpinner spinnerQuantity;
    private JTextArea textAreaDescription;
    private JSpinner spinnerRating;
    private JButton buttonCanel;
    private CharacterContainer characterContainer;

    public AddBuyablePopup(Buyable buyable) {
        this.buyable = buyable;
        frame = new JFrame(buyable.getName());

        $$$setupUI$$$();
        JUtils.OpenFrameAtMouseLocation(frame);

        setFrameOptions();

        SetSpinners();
        buttonCanel.addActionListener(actionEvent -> frame.dispose());
        buttonAddItem.addActionListener(actionEvent -> AddThisItem());
    }

    private void AddThisItem() {
        // TODO: 10/15/21 Add Items to Resource Master List
        DebugUtils.ProgressNormalMsg("ADDING ITEM TO INVENTORY");

        if (characterContainer == null) {
            frame.dispose();
            DebugUtils.ErrorMsg("BUYABLE POPUP ERROR: NO CHARACTER CONTAINER");
            return;
        }

        int itemRating = (int) spinnerRating.getValue();
        int itemQuantity = (int) spinnerQuantity.getValue();

        characterContainer.getResourceController().addItemToInventory(buyable, itemRating, itemQuantity);

        frame.dispose();
    }

    private void SetSpinners() {
        spinnerQuantity.setValue(1);
        //spinnerQuantity.setEnabled(false);
        spinnerRating.setValue(1);
        spinnerRating.setEnabled(false);
    }

    private void setFrameOptions() {
        frame.setContentPane(panelMain);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
        frame.pack();

        frame.repaint();
        panelMain.repaint();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(3, 5, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(panel1, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textAreaDescription = new JTextArea();
        textAreaDescription.setEditable(false);
        textAreaDescription.setLineWrap(true);
        textAreaDescription.setText("");
        scrollPane1.setViewportView(textAreaDescription);
        buttonAddItem = new JButton();
        buttonAddItem.setText("Add Item");
        panelMain.add(buttonAddItem, new GridConstraints(2, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCanel = new JButton();
        buttonCanel.setText("Cancel");
        panelMain.add(buttonCanel, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spinnerQuantity = new JSpinner();
        panelMain.add(spinnerQuantity, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Quantity:");
        panelMain.add(label1, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spinnerRating = new JSpinner();
        panelMain.add(spinnerRating, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Rating");
        panelMain.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panelMain.add(spacer1, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

    public void setDescription(String string) {
        textAreaDescription.setText(string);
        setFrameOptions();
    }

    public Buyable getBuyable() {
        return buyable;
    }

    public void setCharacterContainer(CharacterContainer characterContainer) {
        this.characterContainer = characterContainer;
    }
}
