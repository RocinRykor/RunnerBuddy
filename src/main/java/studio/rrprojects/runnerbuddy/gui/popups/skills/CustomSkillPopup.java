package studio.rrprojects.runnerbuddy.gui.popups.skills;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import studio.rrprojects.runnerbuddy.constants.AttributeConstants;
import studio.rrprojects.runnerbuddy.constants.SkillConstants;
import studio.rrprojects.runnerbuddy.utils.JUtils;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class CustomSkillPopup {
    private final JFrame frame;
    private final SelectSkillPopup parent;
    private JButton submitButton;
    private JButton cancelButton;
    private JTextField textFieldName;
    private JComboBox<SkillPreset> comboBoxType;
    private JCheckBox checkBoxBR;
    private JPanel panelMain;
    private JPanel panelOptions;
    private JLabel labelType;
    private JLabel labelCategory;
    private JLabel labelAttribute;
    private JLabel labelBR;
    private JComboBox<String> comboBoxCategory;
    private JComboBox<String> comboBoxAttribute;
    private ArrayList<SkillPreset> listPresets;

    public CustomSkillPopup(SelectSkillPopup selectSkillPopup) {
        parent = selectSkillPopup;

        frame = new JFrame();
        $$$setupUI$$$();

        JUtils.OpenFrameAtMouseLocation(frame);
        frame.setContentPane(panelMain);
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
        frame.pack();

        frame.repaint();
        panelMain.repaint();

        InitSkillPresets();

        PopulateTypeBox();

        UpdateBoxes();

        submitButton.addActionListener(actionEvent -> {
            ValidCheck();
        });

        comboBoxType.addActionListener(actionEvent -> {
            UpdateBoxes();
        });
    }

    private void UpdateBoxes() {
        SkillPreset preset = (SkillPreset) comboBoxType.getSelectedItem();

            comboBoxCategory.removeAllItems();
        for (String category : preset.skillCategories) {
            comboBoxCategory.addItem(category);
        }

        comboBoxAttribute.removeAllItems();
        ArrayList<String> validAttributes = new ArrayList<>();
        if (preset.forcedAttribute == null) {
            validAttributes.addAll(List.of(AttributeConstants.SKILL_ATTRIBUTES));
        } else {
            validAttributes.add(preset.forcedAttribute);
        }

        for (String attribute : validAttributes) {
            comboBoxAttribute.addItem(attribute);
        }

        LockBox(comboBoxCategory);
        LockBox(comboBoxAttribute);

        CheckBoxCheck(preset.buildRepairLocked);

        System.out.println("SELECTED SKILL TYPE: " + preset);
    }

    private void CheckBoxCheck(boolean buildRepairLocked) {
        if (buildRepairLocked) {
            checkBoxBR.setSelected(false);
            checkBoxBR.setEnabled(false);
        } else {
            checkBoxBR.setEnabled(true);
        }
    }

    private void LockBox(JComboBox<String> comboBox) {
        comboBox.setEnabled(comboBox.getItemCount() > 1);
    }

    private void InitSkillPresets() {
        listPresets = new ArrayList<>();
        listPresets.add(new SkillPreset(SkillConstants.ACTIVE, SkillConstants.ACTIVE_SUBCATEGORIES, null, false));
        listPresets.add(new SkillPreset(SkillConstants.KNOWLEDGE, SkillConstants.KNOWLEDGE_SUBCATEGORIES, AttributeConstants.INTELLIGENCE, true));
        listPresets.add(new SkillPreset(SkillConstants.LANGUAGE, new String[]{SkillConstants.LANGUAGE}, AttributeConstants.INTELLIGENCE, true));
    }

    private void PopulateTypeBox() {
        for (SkillPreset preset : listPresets) {
            comboBoxType.addItem(preset);
        }

        comboBoxType.setSelectedIndex(0);
    }

    private void ValidCheck() {
        if (textFieldName.getText().isBlank()) {
            String title = "INVALID SKILL NAME";
            String errorString = "Please supply the custom skill with a name and try again";
            JOptionPane.showConfirmDialog(null, errorString, title,
                    JOptionPane.DEFAULT_OPTION);
            return;
        }

        System.out.println("CREATING CUSTOM SKILL: " + textFieldName.getText());
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(2, 3, new Insets(10, 10, 10, 10), -1, -1));
        submitButton = new JButton();
        submitButton.setText("Submit");
        panelMain.add(submitButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panelMain.add(cancelButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelOptions = new JPanel();
        panelOptions.setLayout(new GridLayoutManager(9, 2, new Insets(10, 10, 10, 10), -1, -1));
        panelMain.add(panelOptions, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Skill Name:");
        panelOptions.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panelOptions.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textFieldName = new JTextField();
        panelOptions.add(textFieldName, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        labelType = new JLabel();
        labelType.setText("Skill Type:");
        panelOptions.add(labelType, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panelOptions.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        comboBoxType = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        comboBoxType.setModel(defaultComboBoxModel1);
        panelOptions.add(comboBoxType, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelCategory = new JLabel();
        labelCategory.setText("Skill Category:");
        panelOptions.add(labelCategory, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panelOptions.add(spacer3, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        comboBoxCategory = new JComboBox();
        panelOptions.add(comboBoxCategory, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelAttribute = new JLabel();
        labelAttribute.setText("Linked Attribute:");
        panelOptions.add(labelAttribute, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panelOptions.add(spacer4, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        comboBoxAttribute = new JComboBox();
        panelOptions.add(comboBoxAttribute, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelBR = new JLabel();
        labelBR.setText("Build/Repair Availible?");
        panelOptions.add(labelBR, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkBoxBR = new JCheckBox();
        checkBoxBR.setText("");
        panelOptions.add(checkBoxBR, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

    private class SkillPreset {
        private final String skillType;
        private final String[] skillCategories;
        private final String forcedAttribute;
        private final boolean buildRepairLocked;

        public SkillPreset(String skillType, String[] skillCategories, String forcedAttribute, boolean buildRepairLocked) {

            this.skillType = skillType;
            this.skillCategories = skillCategories;
            this.forcedAttribute = forcedAttribute;
            this.buildRepairLocked = buildRepairLocked;
        }

        public String getSkillType() {
            return skillType;
        }

        public String[] getSkillCategories() {
            return skillCategories;
        }

        public String getForcedAttribute() {
            return forcedAttribute;
        }

        public boolean isBuildRepairLocked() {
            return buildRepairLocked;
        }

        @Override
        public String toString() {
            return skillType;
        }
    }
}
