package studio.rrprojects.runnerbuddy.gui.popups;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import studio.rrprojects.runnerbuddy.containers.skills.SkillContainer;
import studio.rrprojects.runnerbuddy.gui.cards.SkillCard;
import studio.rrprojects.runnerbuddy.containers.character.CharacterContainer;

import javax.swing.*;
import java.awt.*;
import java.util.Objects;

public class EditSkillPopup {
    private SkillCard skillCard;
    private CharacterContainer character;
    private JPanel panel1;
    private JButton buttonCancel;
    private JButton buttonSubmit;
    private JComboBox<String> boxSpecialization;
    private JComboBox<String> boxSkillLevel;
    private JCheckBox checkSpecialization;
    private JTextPane textDescription;
    private JLabel textResult;
    private JCheckBox checkBuildRepair;
    SkillContainer skill;

    public EditSkillPopup(SkillContainer baseSkill, CharacterContainer character, SkillCard skillCard) {
        skill = baseSkill;
        this.character = character;
        this.skillCard = skillCard;
        JFrame frame = new JFrame();
        frame.setContentPane(panel1);
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
        frame.pack();

        PopulateSpecializationBox();
        checkBuildRepair.setEnabled(skill.isBuild_repair());
        SetDescription();
        SetResult();
        UpdateAll();
        boxSkillLevel.addActionListener(actionEvent -> UpdateAll());
        boxSpecialization.addActionListener(actionEvent -> UpdateAll());
        checkSpecialization.addActionListener(actionEvent -> UpdateAll());
        buttonCancel.addActionListener(actionEvent -> Exit(frame));
        buttonSubmit.addActionListener(actionEvent -> Submit(frame, baseSkill));
    }

    private void Submit(JFrame frame, SkillContainer baseSkill) {
        baseSkill.setBaseLevel(Integer.parseInt(Objects.requireNonNull(boxSkillLevel.getSelectedItem()).toString()));
        baseSkill.setIsSpecialized(checkSpecialization.isSelected());
        
        if (checkSpecialization.isSelected()) {
            baseSkill.setSpecialization(Objects.requireNonNull(boxSpecialization.getSelectedItem()).toString());
        }
        baseSkill.setSkillResultString(textResult.getText());
        character.getSkillsController().addNewSkill(baseSkill, textResult.getText());
        skillCard.UpdateAll();
        frame.dispose();
    }

    private void Exit(JFrame frame) {
        frame.dispose();
    }

    private void UpdateAll() {
        CalculateTotalCost();
        SetResult();
    }

    private void CalculateTotalCost() {
        String linkedAttribute = skill.getAttribute();
        int attributeLevel = character.getAttributeController().getSelectedAttributes().getAttribute(linkedAttribute);
        int skillLevel = Integer.parseInt(Objects.requireNonNull(boxSkillLevel.getSelectedItem()).toString());

        int totalCost = 0;
        if (skillLevel <= attributeLevel) {
            totalCost = skillLevel;
        } else {
            int excess = skillLevel - attributeLevel;
            totalCost = attributeLevel + (excess * 2);
        }

        skill.setSkillLevel(skillLevel);
        skill.setTotalCost(totalCost);
    }

    private void PopulateSpecializationBox() {
        DefaultComboBoxModel<String> box = new DefaultComboBoxModel<>();
        for (String spec : skill.getSpecialization()) {
            box.addElement(spec);
        }
        boxSpecialization.setModel(box);
    }

    private void SetResult() {
        String string;

        String skillName = skill.getSkillName();

        if (checkBuildRepair.isSelected()) {
            skillName += " (B/R)";
        }

        if (checkSpecialization.isSelected()) {
            int skillLevel = Integer.parseInt(Objects.requireNonNull(boxSkillLevel.getSelectedItem()).toString());
            string = String.format("%s (%d), %s (%d) | Total Cost: %d", skillName, skillLevel - 1, Objects.requireNonNull(boxSpecialization.getSelectedItem()).toString(), skillLevel + 1, skill.getTotalCost());
        } else {
            int skillLevel = Integer.parseInt(Objects.requireNonNull(boxSkillLevel.getSelectedItem()).toString());
            string = String.format("%s (%d) | Total Cost: %d", skillName, skillLevel, skill.getTotalCost());
        }

        textResult.setText(string);
    }

    private void SetDescription() {
        String string = "";
        string += "Name: " + skill.getSkillName() + "\n\n";
        string += "Attribute: " + skill.getAttribute() + "\n\n";
        string += "(B/R): " + skill.getBuild_repairAsString() + "\n\n";
        string += "Description: " + skill.getDescription() + "\n\n";
        string += "Source: " + skill.getSource() + "\n\n";

        textDescription.setText(string);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-14079180));
        panel1.setForeground(new Color(-11805347));
        panel1.setPreferredSize(new Dimension(400, 400));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buttonSubmit = new JButton();
        buttonSubmit.setText("Submit");
        panel1.add(buttonSubmit, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        boxSkillLevel = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("0");
        defaultComboBoxModel1.addElement("1");
        defaultComboBoxModel1.addElement("2");
        defaultComboBoxModel1.addElement("3");
        defaultComboBoxModel1.addElement("4");
        defaultComboBoxModel1.addElement("5");
        defaultComboBoxModel1.addElement("6");
        boxSkillLevel.setModel(defaultComboBoxModel1);
        panel1.add(boxSkillLevel, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel1.add(buttonCancel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkSpecialization = new JCheckBox();
        checkSpecialization.setBackground(new Color(-14079180));
        checkSpecialization.setForeground(new Color(-11805347));
        checkSpecialization.setText("Specialization");
        panel1.add(checkSpecialization, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        boxSpecialization = new JComboBox();
        boxSpecialization.setEditable(true);
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        boxSpecialization.setModel(defaultComboBoxModel2);
        panel1.add(boxSpecialization, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textResult = new JLabel();
        textResult.setBackground(new Color(-14079180));
        textResult.setForeground(new Color(-11805347));
        textResult.setText("X");
        panel1.add(textResult, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textDescription = new JTextPane();
        textDescription.setBackground(new Color(-14079180));
        textDescription.setCaretColor(new Color(-11805347));
        textDescription.setEditable(false);
        textDescription.setForeground(new Color(-11805347));
        textDescription.setText("X");
        scrollPane1.setViewportView(textDescription);
        checkBuildRepair = new JCheckBox();
        checkBuildRepair.setBackground(new Color(-14079180));
        checkBuildRepair.setForeground(new Color(-11805347));
        checkBuildRepair.setText("Build/Repair");
        panel1.add(checkBuildRepair, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
